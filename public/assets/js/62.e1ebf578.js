(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{613:function(e,a,r){"use strict";r.r(a);var t=r(13),v=Object(t.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"总括"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总括"}},[e._v("#")]),e._v(" 总括")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("前端控制器（DispatcherServlet）：接收请求，响应结果，相当于电脑的CPU。")])]),e._v(" "),r("li",[r("p",[e._v("处理器映射器（HandlerMapping）：根据URL去查找处理器")])]),e._v(" "),r("li",[r("p",[e._v("处理器（Handler）：（需要程序员去写代码处理逻辑的）")])]),e._v(" "),r("li",[r("p",[e._v("处理器适配器（HandlerAdapter）：会把处理器包装成适配器，这样就可以支持多种类型的处理器，类比笔记本的适配器（适配器模式的应用）")])]),e._v(" "),r("li",[r("p",[e._v("视图解析器（ViewResovler）：进行视图解析，多返回的字符串，进行处理，可以解析成对应的页面")])])]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"springmvc执行流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springmvc执行流程"}},[e._v("#")]),e._v(" SpringMVC执行流程")]),e._v(" "),r("ol",[r("li",[e._v("用户发起请求到前端控制器")]),e._v(" "),r("li",[e._v("前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handle）：通过xml配置或者注解进行查找")]),e._v(" "),r("li",[e._v("找到以后处理器映射器（HandlerMappering）像前端控制器返回执行链（HandlerExecutionChain）")]),e._v(" "),r("li",[e._v("前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）")]),e._v(" "),r("li",[e._v("处理器适配器去执行Handler")]),e._v(" "),r("li",[e._v("Handler执行完给处理器适配器返回ModelAndView")]),e._v(" "),r("li",[e._v("处理器适配器向前端控制器返回ModelAndView")]),e._v(" "),r("li",[e._v("前端控制器请求视图解析器（ViewResolver）去进行视图解析")]),e._v(" "),r("li",[e._v("视图解析器像前端控制器返回View")]),e._v(" "),r("li",[e._v("前端控制器对视图进行渲染")]),e._v(" "),r("li",[e._v("前端控制器向用户响应结果")])]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"配置mvc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置mvc"}},[e._v("#")]),e._v(" 配置mvc")]),e._v(" "),r("h3",{attrs:{id:"_1-新建一个spring文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-新建一个spring文件"}},[e._v("#")]),e._v(" 1.新建一个spring文件")]),e._v(" "),r("h3",{attrs:{id:"_2-配置bean"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置bean"}},[e._v("#")]),e._v(" 2.配置bean")]),e._v(" "),r("h4",{attrs:{id:"_2-1-声明处理器映射器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-声明处理器映射器"}},[e._v("#")]),e._v(" 2.1.声明处理器映射器")]),e._v(" "),r("h4",{attrs:{id:"_2-2-声明处理器适配器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-声明处理器适配器"}},[e._v("#")]),e._v(" 2.2.声明处理器适配器")]),e._v(" "),r("h4",{attrs:{id:"_2-3-声明视图解析器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-声明视图解析器"}},[e._v("#")]),e._v(" 2.3.声明视图解析器")]),e._v(" "),r("p",[e._v("视图解析器拼接视图的前缀与后缀")]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"前端控制器-dispatcherservlet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前端控制器-dispatcherservlet"}},[e._v("#")]),e._v(" 前端控制器（DispatcherServlet）")]),e._v(" "),r("p",[e._v("继承了Servlet，走的是doService方法，调用的是父类（FrameworkServlet）")]),e._v(" "),r("h3",{attrs:{id:"_1-请求进来dispatchersevlet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-请求进来dispatchersevlet"}},[e._v("#")]),e._v(" 1.请求进来DispatcherSevlet")]),e._v(" "),r("h3",{attrs:{id:"_2-dodispatch-request-response"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-dodispatch-request-response"}},[e._v("#")]),e._v(" 2.doDispatch(request, response);")]),e._v(" "),r("p",[e._v("doDispatch内部有获取处理器的方法getHandler()，获取到的是HandlerExecutionChain类型的数据")]),e._v(" "),r("h3",{attrs:{id:"_3-遍历handlermapping"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-遍历handlermapping"}},[e._v("#")]),e._v(" 3.遍历HandlerMapping")]),e._v(" "),r("p",[e._v("发现BeanNameUrlHandlerMapping，返回mappedHandler")]),e._v(" "),r("h3",{attrs:{id:"_4-根据handler获取handleradapter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-根据handler获取handleradapter"}},[e._v("#")]),e._v(" 4.根据Handler获取handlerAdapter")]),e._v(" "),r("p",[e._v("使用getHandleAdpter(mappedHandler.getHandler)，返回HandlerAdapter")]),e._v(" "),r("p",[e._v("springmvc会根据不同的handler返回不同的适配器（返回simpleControllerHandler）")]),e._v(" "),r("h3",{attrs:{id:"_5-调用handler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-调用handler"}},[e._v("#")]),e._v(" 5.调用handler")]),e._v(" "),r("h3",{attrs:{id:"_6-7-返回modelandview"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-返回modelandview"}},[e._v("#")]),e._v(" 6&7.返回modelAndView")]),e._v(" "),r("p",[e._v("使用ha.handle()，把handler转成了controller（实现了controller接口）")]),e._v(" "),r("p",[e._v("执行modelAndView中的方法")]),e._v(" "),r("h3",{attrs:{id:"_8-处理结果集"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-处理结果集"}},[e._v("#")]),e._v(" 8.处理结果集")]),e._v(" "),r("p",[e._v("processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException)")]),e._v(" "),r("h3",{attrs:{id:"_9-返回view对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-返回view对象"}},[e._v("#")]),e._v(" 9.返回view对象")]),e._v(" "),r("p",[e._v("执行resolveViewName(viewName, mv.getModelIntenal(), locale, request);")]),e._v(" "),r("h3",{attrs:{id:"_10-把view的数据填充进去"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-把view的数据填充进去"}},[e._v("#")]),e._v(" 10.把view的数据填充进去")]),e._v(" "),r("p",[e._v("view.render(mv.getModelInteral(), request, response);")]),e._v(" "),r("h3",{attrs:{id:"_11-输出"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-输出"}},[e._v("#")]),e._v(" 11.输出")]),e._v(" "),r("p",[e._v("renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);")]),e._v(" "),r("p",[e._v("rd.forward(request, response);")]),e._v(" "),r("hr"),e._v(" "),r("h3",{attrs:{id:"注解方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注解方式"}},[e._v("#")]),e._v(" 注解方式")]),e._v(" "),r("p",[e._v("根据Handler获取handlerAdapter")]),e._v(" "),r("p",[e._v("（返回RequestMappingHandlerAdapter）")]),e._v(" "),r("p",[e._v("返回modelAndView的时候使用")]),e._v(" "),r("p",[e._v("AbstractHandlerMethodAdapter")]),e._v(" "),r("p",[e._v("doInvoke()的getBridgedMethod().invoke(getBean(), args)")]),e._v(" "),r("p",[e._v("getBridgedMethod() 就是拿到原调用的方法")]),e._v(" "),r("p",[e._v("getBean() 就是拿到原调用方法的bean")]),e._v(" "),r("hr"),e._v(" "),r("p",[e._v("实现HttpRequestHandler")]),e._v(" "),r("p",[e._v("重写handleRequest方法")]),e._v(" "),r("p",[e._v("直接重定向到指定页")]),e._v(" "),r("p",[e._v("使用的是BeanNameUrlHandlerMapping")]),e._v(" "),r("p",[e._v("HttpRequestHandlerAdapter实际上就是把过来的转成对应的handler，返回mv对象")]),e._v(" "),r("p",[e._v("把handler转成HttpRequestHandler")]),e._v(" "),r("hr"),e._v(" "),r("p",[e._v("装载配置的时候")]),e._v(" "),r("p",[e._v("调用的是dispatcherSevlet#initStategies()")]),e._v(" "),r("p",[e._v("BeanFactoryUtils.beansOfTypeIncludingAncestors();")]),e._v(" "),r("p",[e._v("工厂模式装配组件到上下文（ApplicationContext）中")]),e._v(" "),r("p",[e._v("就是说初始化的时候就已经把工程内所有的方法用到的组件映射关系给罗列好了")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://pic-new-1304161434.cos.ap-guangzhou.myqcloud.com/img/202403181000346.png",alt:"image-20240318100037255"}})])])}),[],!1,null,null,null);a.default=v.exports}}]);